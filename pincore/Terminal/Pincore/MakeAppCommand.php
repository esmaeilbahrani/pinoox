<?php

namespace Pinoox\Terminal\Pincore;

use Pinoox\Portal\FileSystem;
use Pinoox\Component\File;
use Pinoox\Component\Terminal;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(
    name: 'app:create',
    description: 'Create a new Pinoox application boilerplate under apps/'
)]
class MakeAppCommand extends Terminal
{
    protected function configure(): void
    {
        $this->addArgument('package', InputArgument::REQUIRED, 'Package name (e.g. com_my_app)');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        parent::execute($input, $output);

        $name = $input->getArgument('package');
        // Prepare metadata
        $helper = $this->getHelper('question');
        $segments = explode('_', $name);
        $defaultDisplay = end($segments);
        
        // Ask for display name
        $questionName = new \Symfony\Component\Console\Question\Question(
            'Enter app display name: ',
            $defaultDisplay
        );
        $displayName = $helper->ask($input, $output, $questionName);
        
        // Ask for developer name
        $questionDev = new \Symfony\Component\Console\Question\Question(
            'Enter developer name: ',
            ''
        );
        $developer = $helper->ask($input, $output, $questionDev);
        
        // Ask for description
        $questionDesc = new \Symfony\Component\Console\Question\Question(
            'Enter description: ',
            $displayName
        );
        $description = $helper->ask($input, $output, $questionDesc);
        
        $appDir = 'apps/' . $name;

        if (FileSystem::exists($appDir)) {
            $output->writeln("<error>App '{$name}' already exists!</error>");
            return Command::FAILURE;
        }

        // Create directories
        FileSystem::mkdir([
            "{$appDir}",
            "{$appDir}/config",
            "{$appDir}/Controller",
            "{$appDir}/router",
            "{$appDir}/theme/default",
            "{$appDir}/pinker",
        ]);

        // Generate app.php
        $appConfig = <<<PHP
<?php
// pinoox app file, generated by app:create

return [
    'package'       => '{$name}',
    'name'          => '{$displayName}',
    'developer'     => '{$developer}',
    'description'   => '{$description}',
    'version-name'  => '1.0',
    'version-code'  => 1,
    'icon'          => 'icon.png',
    'enable'        => true,
    'theme'         => 'default',
];
PHP;
        FileSystem::dumpFile("{$appDir}/app.php", $appConfig);

        // Get copyright stub content
        $copyrightStub = file_get_contents(PINOOX_CORE_PATH . 'stubs/copyright.stub');

        // Generate router/actions.php
        $actionsFile = <<<PHP
<?php
{$copyrightStub}

use Pinoox\Portal\View;
use function Pinoox\Router\{action};
use App\\{$name}\Controller\MainController;

action('index', MainController::class);
action('pinooxjs', fn() => View::jsResponse('pinoox'));
PHP;
        FileSystem::dumpFile("{$appDir}/router/actions.php", $actionsFile);

        // Generate router/routes.php
        $routesFile = <<<PHP
<?php
{$copyrightStub}

use function Pinoox\Router\{get};

get(
    path: '/',
    action: '@index',
);

get(
    path: '/dist/pinoox.js',
    action: '@pinooxjs',
);

get(
    path: '*',
    action: fn() => redirect(url('/')),
);
PHP;
        FileSystem::dumpFile("{$appDir}/router/routes.php", $routesFile);

        // Generate Controller/MainController.php
        $controllerFile = <<<PHP
<?php
{$copyrightStub}

namespace App\\{$name}\Controller;

use Pinoox\Component\Kernel\Controller\Controller;
use Pinoox\Portal\View;

class MainController extends Controller
{
    public function __invoke()
    {
        return View::render('hello');
    }
}
PHP;
        FileSystem::dumpFile("{$appDir}/Controller/MainController.php", $controllerFile);

        // Generate hello.twig from stub
        $indexStub = file_get_contents(PINOOX_CORE_PATH . 'stubs/index.twig.stub');
        $indexContent = str_replace('{{appName}}', $displayName, $indexStub);
        FileSystem::dumpFile("{$appDir}/theme/default/hello.twig", $indexContent);

        // Generate pinoox.twig from stub
        $pinooxStub = file_get_contents(PINOOX_CORE_PATH . 'stubs/pinoox.twig.stub');
        FileSystem::dumpFile("{$appDir}/theme/default/pinoox.twig", $pinooxStub);

        // Generate functions.php from stub
        $functionsStub = file_get_contents(PINOOX_CORE_PATH . 'stubs/functions.php.stub');
        FileSystem::dumpFile("{$appDir}/theme/default/functions.php", $functionsStub);

        // Ask user to update only the Pinker baked router config
        $confirm = new \Symfony\Component\Console\Question\ConfirmationQuestion(
            "Do you want to add a route to the router config? (Y/n) ",
            true
        );
        if ($helper->ask($input, $output, $confirm)) {
            // Ask for route path
            $defaultPath = '/' . $name;
            $question = new \Symfony\Component\Console\Question\Question(
                "Enter route path for app (e.g. /{$name}): ",
                $defaultPath
            );
            $routePath = $helper->ask($input, $output, $question);

            // Ensure route path starts with a slash
            if (substr($routePath, 0, 1) !== '/') {
                $routePath = '/' . $routePath;
                $output->writeln("<comment>Added leading slash to route path: {$routePath}</comment>");
            }

            // Update Pinker-baked router config
            $bakedRouter = PINOOX_CORE_PATH . 'pinker/config/app/router.config.php';
            $routes = FileSystem::exists($bakedRouter) ? include $bakedRouter : [];
            $routes[$routePath] = $name;
            ksort($routes);
            $export = "<?php\n\nreturn [\n";
            foreach ($routes as $path => $pkg) {
                $export .= "    '{$path}' => '{$pkg}',\n";
            }
            $export .= "];\n";
            FileSystem::dumpFile($bakedRouter, $export);
            $output->writeln("<info>Baked route '{$routePath}' registered for app '{$name}'.</info>");
        }

        $output->writeln("<info>App '{$name}' created successfully in {$appDir}</info>");
        return Command::SUCCESS;
    }
} 